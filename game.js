//@ sourceMappingURL=game.map
// Generated by CoffeeScript 1.6.1
(function() {
  var Board, Point;

  Board = (function() {

    function Board(rows, cols) {
      var x, y, _i, _j, _ref, _ref1;
      this.rows = rows;
      this.cols = cols;
      this.points = [];
      for (x = _i = 0, _ref = this.rows; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        this.points[x] = [];
        for (y = _j = 0, _ref1 = this.cols; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          this.points[x][y] = new Point(x, y, Math.random() > 0.5, this);
        }
      }
    }

    Board.prototype.render = function() {
      var point, rows, _i, _j, _len, _len1, _ref;
      _ref = this.points;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rows = _ref[_i];
        for (_j = 0, _len1 = rows.length; _j < _len1; _j++) {
          point = rows[_j];
          point.render();
        }
      }
      return null;
    };

    Board.prototype.step = function() {
      var liveCount, n, neighbours, point, rows, _i, _j, _len, _len1, _ref;
      _ref = this.points;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rows = _ref[_i];
        for (_j = 0, _len1 = rows.length; _j < _len1; _j++) {
          point = rows[_j];
          neighbours = point.neighbours();
          liveCount = ((function() {
            var _k, _len2, _results;
            _results = [];
            for (_k = 0, _len2 = neighbours.length; _k < _len2; _k++) {
              n = neighbours[_k];
              if (n.live) {
                _results.push(n);
              }
            }
            return _results;
          })()).length;
          switch (false) {
            case !(point.live && liveCount < 2):
              point.live = false;
              break;
            case !(point.live && (2 <= liveCount && liveCount <= 3)):
              point.live = true;
              break;
            case !(point.live && liveCount > 3):
              point.live = false;
              break;
            case !(!point.live && liveCount === 3):
              point.live = true;
          }
        }
      }
      return this.render();
    };

    Board.prototype.run = function() {
      var _this = this;
      return this.intervalId = setInterval((function() {
        return _this.step();
      }), 1000);
    };

    Board.prototype.stop = function() {
      return clearInterval(this.intervalId);
    };

    return Board;

  })();

  Point = (function() {

    function Point(x, y, live, board) {
      this.x = x;
      this.y = y;
      this.live = live;
      this.board = board;
    }

    Point.prototype.render = function() {
      return canvas.draw({
        col: this.x,
        row: this.y,
        live: this.live
      });
    };

    Point.prototype.neighbours = function() {
      var maxX, maxY, minX, minY, points, x, y, _i, _j;
      minX = this.x === 0 ? 0 : this.x - 1;
      maxX = this.x === this.board.rows ? this.board.rows : this.x + 1;
      minY = this.y === 0 ? 0 : this.y - 1;
      maxY = this.y === this.board.cols ? this.board.cols : this.y + 1;
      points = [];
      for (x = _i = minX; minX <= maxX ? _i <= maxX : _i >= maxX; x = minX <= maxX ? ++_i : --_i) {
        for (y = _j = minY; minY <= maxY ? _j <= maxY : _j >= maxY; y = minY <= maxY ? ++_j : --_j) {
          if (this.x === x && this.y === y) {
            continue;
          }
          points.push(this.board.points[x][y]);
        }
      }
      return points;
    };

    return Point;

  })();

  window.game = function() {
    window.board = new Board(50, 50);
    return board.render();
  };

}).call(this);
